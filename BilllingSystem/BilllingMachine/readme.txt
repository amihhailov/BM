Описание задачи:
----------------------------------------------------

--------------------------------------------------------------------------------
Задача должна быть реализована на C# языке, с использованием технологии .NET
Среда: Microsoft Visual Studio 2008, но можно и 2005, а так же любой Express
Edition, которые можно скачать с сайта Microsof:
http://www.microsoft.com/express/product/default.aspx (Visual C# 2008 Express
Edition подойдёт идеально).

Суть задачи - "биллинговая машина в миниатюре". Есть входные данные, их нужно
соответствующим образом обработать, выдать результат. Никаких особых
алгоритмических хитростей, главные критерии: использование языка C#, классов
.NET, корректное выполнение задачи, и, желательно, оптимальная скорость
отработки программы.

Итак, я вижу решение задачи как небольшой GUI с табами, с таблицей на каждом
табе и кнопкой/кнопками для функционирования. Но вы можете выбрать любой другой
удобный вид.

Сейчас, по шагам, какие входные данные у нас есть, и что мы должны получить на
выходе.

1. Файл направлений country.txt
Структура его такова: код, полное название направления, общее название
направления. Например: "1206,USA Washington,USA", где: 1206 - код, USA
Washington - полное название направления, USA - общее название направления.

Этот файл надо загрузить в систему в таком виде, в каком есть, без всяких
изменений. Желательно - иметь возможность его просмотреть в GUI в таблице.

2. Есть файл тарифов, присланных "заказчиком" - rates.csv
Структура его такова: название направления; цена за минуту для фиксированных
сетей; цена за минуту для мобильных сетей. Например: "Afghanistan;1,73;1,99",
где: Afghanistan - название направления, 1,73 - цена для фиксированных номеров,
1,99 - цена для мобильных сетей.

Его можно загрузить как есть, а можно сразу обработать, привести к нужному нам
виду (что предпочтительнее, так как алгоритм тарификации будет работать быстрее
с заранее подготовленными данными).

Алгоритм обработки таков: для каждой строчки из тарифов мы должны найти
соответствие в направлениях по общему названию направления. Все направления со
словами Personal и Premium в полном названии сразу откидываем - для них тарифов
не будет. Для оставшихся - если нашли совпадение, создаем запись тарифа с
направлением и ценой. В случае, если в общем названии направления есть слово
Mobile - мобильной ценой, если нет - фиксированной ценой. Дублей быть не должно.

Пример, строчка "Afghanistan;1,73;1,99" должна дать в результате два тарифа:
Afghanistan        1,73
Afghanistan Mobile    1,99

Строчка "Ireland;0,32;0,96":
Ireland            0,32
Ireland Mobile        0,96

и т.д.

3. Загружаем один из файлов актуальных звонков calls1.txt, calls2.txt или calls3.txt
Стуктура такова: набранный номер, продолжительность звонка в секундах. Например:
"491747922413,66", где: 491747922413 - набраннй номер, 66 - секунды.

Никаких изменений не вносим, просто загружаем и показываем.

4. Тарификация
Наконец, самое интересное. Используя наши направления, таблицу тарифов и
исходные звонки - мы должны определить, куда звонили, определить тариф,
округлить секунды и посчитать стоимость звонка. Вывести результаты и сохранить
их в файл.

Поиск направления выглядит так: берем номер, ищем по таблице направлений. В
случае успеха - запоминаем полное и общее название направления в записи. В
случае неудачи - отнимаем от номера один символ справа и снова ищем. И так -
пока не найдем, или искать будет больше нечего.

Пример: первый звонок у нас сделан на номер 491747922413. Такого номера нет в
направлениях, нет и 49174792241, и 4917479224 и т.д., зато есть 49174. Найденное
направление: Germany Mobile D2 NET, общее название Germany Mobile.

Если направление найдено, нам надо получить округленные секунды звонка. Алгоритм
такой: если в общем названии направления есть слово Mobile, то округляется по
правилу 60/30. Что значит, минимальная продолжительность звонка - 60 секунд (то
есть все звонки от 1 до 60 секунд округляются до 60), и дальше шаг в 30 секунд.
      Например, если исходная продолжительность 61 секунда, в результате получится
90, если 100, будет 120 и т.д.

Если это звонок не на мобильное направление, то округляется по правилу 60/10, то
есть минимальная продолжительность 60 секунд, шаг округления - 10 секунд.

Если найдено направление, ищем на него тариф (по общему названию), если найден
тариф - вычисляем стоимость звонка. Только учтите, что в тарифе у нас указана
цена за минуту. Полученная цена должна быть округлена до 3 знаков после запятой.

Вот и все. Тарификация закончена.

Результат должен выглядеть как таблица, состоящая из полей:
набранный номер
полное название найденного направления
общее название найденного направления
исходные секунды
округленные секунды
название направления тарифа
тариф на минуту
конечная цена звонка

По приведенному выше первому звонку должен получится такой результат:

491747922413
Germany Mobile D2 NET
Germany Mobile
66
90
Germany Mobile
0,99
1,485

Эти данные должны сохранятся в текстовый файл. Все поля в той же
последовательности, разделённые точкой с запятой. Один звонок - одна строчка.

Теперь об оценке быстродействия.

Так как исходные данные не слишком велики, предлагаю процесс тарификации
выполнять 100 раз в цикле, выдав по окончанию результат и время в миллисекундах,
сколько ушло на обработку. Время должно выдаваться где-то в окошке/диалоге на
GUI, а так же - записываться в результативный файл последней строчкой. Есть
несколько способов оптимизировать процесс тарификации, но особо увлекаться этим
не стоит. На первом месте - корректная работа программы, на втором - быстродействие.

Вот и всё. Могу предложить бонусную задачу - все тоже самое, только
реализованное в виде Windows Service. Понятно, что никакого GUI там не будет,
все файлы должны загружаться, обрабатываться и выдавать результат на старте сервиса.

-----------------------------------------------


Инструкция по выполненному проекту:

1) Soluction 'BillingSystem' состоит из трех проектов:

	- BillingMachine 
	- BillingMachineWinService
	- BillingMachineWinServiceSetup

2) 'BillingMachine' - это основной проект (от него зависит 'BillingMachineWinService') с GUI (WinForm) и бизнес логикой.

Его можно просто билдить и запускать. 

GUI состоит из четырех табов:

	- General (общая информация: время, кол-во итераций, статус, процент завершенной работы, кол-во обработанных звонков)
	- Country (после нажатия на кнопку 'LoadCountry' загружаются данные из файла 'country.txt')
	- Rates (после нажатия на кнопку 'LoadRates' загружаются данные из файла 'rates.csv')
	- Calls (после нажатия на кнопку 'LoadCalls' открывает диалог для выбора одного из файлов 'calls1.txt', 'calls2.txt', 'calls3.txt'). 

NB! Файлы звонков обрабатываются по-одному.

В 'Resources' папке лежат все присланные исходные данные. Оттуда я выбирал файлы для обработки данных.
В класс '\Common\Globals.cs' вынесены все глобальные переменные, Lists и Dictionaries.

Количество итераций обработки данных можно поменять в этой переменной (по умолчанию 100. Это видно в GUI):

	- ITERATIONS_NUM_VALUE = 100;

NB! Если поменять значение количества итераций то шаг и максимальный размер в ProgressBar котроле автоматически изменятся на соответствующее значение.
Значение количества итераций в GUI также автоматически измениться.

Все пути к файлам из 'Resources' папке относительные и установлены в переменных:

	- ROOT_PROJECT_DIR
	- COUNTRY_FILE_NAME
	- RATES_FILE_NAME

Результаты можно посмотреть в файлах: 'output-calls1.txt', 'outuput-calls2.txt', 'output-calls3.txt'.
Пути к этим файлам находятся в следующих переменных с относительными путями:

	- OUTPUT_FILE_NAME
	- OUTPUT_RESOURCE_DIR


3) 'BillingMachineWinService' - это проект, реализованный в виде Windows Service. Он зависит от 'BillingMachine' проекта.
Этот проект нужно сбилдить и проинсталлировать Windows Service одним из двух способов:

	1. Запустить следующие комманды из коммандной строки (CMD). В моем случае:

	> installutil C:\Projects\CSC\BilllingSystem\BillingMachineWinService\bin\Debug\BillingMachineWinService.exe - инсталлировать сервис
	> installutil /u C:\Projects\CSC\BilllingSystem\BillingMachineWinService\bin\Debug\BillingMachineWinService.exe - деинсталлировать сервис

	2. См. пункт 4) ниже.

Затем запустить (Start/Stop) проинсталлированный 'BillingMachine' сервис из 'ControlPanel -> Administrative Tools -> Services'.

Количество итераций меняется также, т.е. из той же переменной, описанной выше (по умолчанию 100).

Все пути к файлам из 'Resources' папке абсолютные и установлены в переменных:

	- COUNTRY_ABSOLUTE_FILE_NAME
	- RATES_ABSOLUTE_FILE_NAME
	- CALLS_ABSOLUTE_DIR_NAME

NB! Их нужно поменять на свои.
Список файлов звонков находиться в списке (список менять не надо): public static List<string> LcallsFiles
В данном случае все три файла звонков ('calls1.txt', 'calls2.txt', 'calls3.txt') обрабатываются сразу при старте сервиса.

Результаты можно посмотреть в файлах: 'output-calls1.txt', 'outuput-calls2.txt', 'output-calls3.txt'.
Пути к этим файлам находятся в следующей переменной с относительными путями:

	- OUTPUT_ABSOLUTE_DIR_NAME

NB! Этот путь можно сменить на свой. Если не найдет, указанную директорию, то система сама создаст папку.


4) 'BillingMachineWinServiceSetup' - это проект, для установки по Wizard-у проекта 'BillingMachineWinService'.

Этот проект нужно сбилдить (вызывать из конекстного меню (right click на проекте) 'Build'/'Rebuild').
Для инсталляции нужно выбрать из контекстного меню 'Install'
Для деинсталляции нужно выбрать из контекстного меню 'Uninstall' или выбрать 'Uninstall' на 'BillingMachineWinServiceSetup' из 'ControlPanel -> Programs and Features'.

--------------------------------------------------